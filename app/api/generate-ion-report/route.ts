import { type NextRequest, NextResponse } from "next/server"
import { createClient } from "@/lib/supabase/server"
import PDFDocument from "pdfkit"

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const projectId = searchParams.get("projectId")

    if (!projectId) {
      return NextResponse.json({ error: "Project ID is required" }, { status: 400 })
    }

    const supabase = await createClient()

    const { data: project, error } = await supabase.from("ion_projects").select("*").eq("id", projectId).single()

    if (error || !project) {
      return NextResponse.json({ error: "Project not found" }, { status: 404 })
    }

    // Create PDF
    const doc = new PDFDocument({ margin: 50 })
    const chunks: Buffer[] = []

    doc.on("data", (chunk) => chunks.push(chunk))
    doc.on("end", () => {
      const pdfBuffer = Buffer.concat(chunks)
      return new NextResponse(pdfBuffer, {
        headers: {
          "Content-Type": "application/pdf",
          "Content-Disposition": `attachment; filename="ion-solar-report-${projectId}.pdf"`,
        },
      })
    })

    // Header with Ion Solar branding
    doc.fontSize(24).fillColor("#FF6B35").text("iON Solar", 50, 50)
    doc.fontSize(16).fillColor("#000").text("Professional Solar Analysis Report", 50, 80)

    // Project Information
    doc.fontSize(18).text("Project Details", 50, 120)
    doc
      .fontSize(12)
      .text(`Project Name: ${project.project_name}`, 50, 150)
      .text(`Address: ${project.address}`, 50, 170)
      .text(`System Size: ${project.system_size_kw} kW`, 50, 190)
      .text(`Annual Production: ${project.annual_production_kwh?.toLocaleString()} kWh`, 50, 210)
      .text(`Estimated Annual Savings: $${project.estimated_savings?.toLocaleString()}`, 50, 230)

    // Homeowner Information
    doc.fontSize(18).text("Homeowner Information", 50, 270)
    doc
      .fontSize(12)
      .text(`Name: ${project.homeowner_name}`, 50, 300)
      .text(`Email: ${project.homeowner_email}`, 50, 320)
      .text(`Phone: ${project.homeowner_phone}`, 50, 340)

    // Footer
    doc
      .fontSize(10)
      .fillColor("#666")
      .text("Generated by iON Solar Professional Dashboard", 50, 750)
      .text(`Report Date: ${new Date().toLocaleDateString()}`, 50, 765)

    doc.end()

    return new Promise((resolve) => {
      doc.on("end", () => {
        const pdfBuffer = Buffer.concat(chunks)
        resolve(
          new NextResponse(pdfBuffer, {
            headers: {
              "Content-Type": "application/pdf",
              "Content-Disposition": `attachment; filename="ion-solar-report-${projectId}.pdf"`,
            },
          }),
        )
      })
    })
  } catch (error) {
    console.error("Error generating Ion report:", error)
    return NextResponse.json({ error: "Failed to generate report" }, { status: 500 })
  }
}
